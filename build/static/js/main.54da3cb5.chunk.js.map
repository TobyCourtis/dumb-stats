{"version":3,"sources":["counter-logic/counter-logic.js","Counter.js","App.js","reportWebVitals.js","index.js"],"names":["max","findSecondsFromDate","date","getUTCHours","getUTCMinutes","getUTCSeconds","maxTimeInSeconds","Date","secondsInTwelveHours","currentNumberOfShaggers","timeNow","difference","Math","abs","addNoise","maxFluctuation","deviation","randomNormal","mean","dev","Counter","useCountUp","end","duration","separator","onEnd","update","timer","setInterval","clearInterval","updateCounter","countUp","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAEMA,EAAM,OAGZ,SAASC,EAAoBC,GACzB,OAA6B,KAArBA,EAAKC,cAAgD,GAAvBD,EAAKE,gBAAyBF,EAAKG,gBAI7E,IACMC,EAAmBL,EADL,IAAIM,KAAK,sCAEvBC,EAAuB,MAEtB,SAASC,IACZ,IAAIC,EAAU,IAAIH,KACdI,EAAaC,KAAKC,IAAIZ,EAAoBS,GAAWJ,GAQzD,OANIK,EAAaH,IACbG,EAAaH,EAAuBG,EAAWH,GAG9BR,EAAiB,kBAAXW,EAKxB,SAASG,EAASC,GAGrB,IAAMC,EAAaP,IAA0BT,EAAK,GAElD,OAAOiB,IAAa,CAACC,KAAM,EAAGC,IAAKH,I,WCMxBI,EAhCC,WAAO,IAAD,EAKdC,qBAAW,CACXC,IAAKb,IACLc,SAAU,EACVC,UAAW,IACXC,MAAO,kBAGX,WAEIC,EAAOjB,IAA4BK,KAEnC,IAAMa,EAAQC,aAAY,WACtBF,EAAOjB,IAA4BK,OACpC,MAEH,OAAO,WACHe,cAAcF,IAZLG,MANbC,EAHc,EAGdA,QACAL,EAJc,EAIdA,OAqBJ,OACI,8BACI,sBAAMM,UAAU,UAAhB,SAA2BD,OChBxBE,MAdf,WAEE,OACE,qBAAKD,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,EAAD,CAASA,UAAU,YACnB,mBAAGA,UAAU,mBAAb,iDCGOE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.54da3cb5.chunk.js","sourcesContent":["import randomNormal from \"random-normal\";\n\nconst max = 943356\nconst min = 679542\n\nfunction findSecondsFromDate(date){\n    return (date.getUTCHours() * 3600) + (date.getUTCMinutes() * 60) + (date.getUTCSeconds())\n}\n\n// 9am EST is the time where the most humans are awake\nconst maxDateTime = new Date(\"Sat Feb 13 2021 09:00:00 GMT-0500\")\nconst maxTimeInSeconds = findSecondsFromDate(maxDateTime)\nconst secondsInTwelveHours = 43200\n\nexport function currentNumberOfShaggers(){\n    let timeNow = new Date()\n    var difference = Math.abs(findSecondsFromDate(timeNow) - maxTimeInSeconds)\n\n    if (difference > secondsInTwelveHours){\n        difference = secondsInTwelveHours - difference%secondsInTwelveHours\n    }\n\n    var numberOfPeople = max - difference*((max - min)/secondsInTwelveHours)\n\n    return numberOfPeople\n}\n\nexport function addNoise(maxFluctuation){\n    // +1 required so it's between 1 and max value not 0 and max value - 1\n\n    const deviation = (currentNumberOfShaggers()/max)*10\n\n    return randomNormal({mean: 0, dev: deviation})\n}\n\n","import React, { useState, useEffect } from 'react';\nimport { useCountUp } from 'react-countup';\nimport {currentNumberOfShaggers} from './counter-logic/counter-logic'\nimport {addNoise} from './counter-logic/counter-logic'\n\n\nconst Counter = () => {\n\n    const {\n        countUp,\n        update\n    } = useCountUp({\n        end: currentNumberOfShaggers(),\n        duration: 3,\n        separator: \",\",\n        onEnd: () => updateCounter()\n    });\n\n    function updateCounter(){\n        // update called twice below so there is a nice transition from initial count up and noise\n        update(currentNumberOfShaggers() + addNoise())\n\n        const timer = setInterval(() => {\n            update(currentNumberOfShaggers() + addNoise())\n        }, 1500);\n\n        return () => {\n            clearInterval(timer);\n        };\n    }\n\n    return (\n        <div>\n            <span className=\"counter\">{countUp}</span>\n        </div>\n    );\n};\n\nexport default Counter;\n","import './App.css';\nimport Counter from './Counter'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Counter className=\"counter\" />\n        <p className=\"counterParagraph\">\n            People are shagging right now\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}